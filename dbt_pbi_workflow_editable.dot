### Function Documentation and Comments for Code

#### 1. `refresh_pbi(group, dataset, token, base_url=None)`
- **Purpose**: Refreshes a Power BI dataset by making a POST request to the Power BI API.
- **Inputs**:
  - `group`: Group ID (Workspace) of the dataset.
  - `dataset`: Dataset ID to be refreshed.
  - `token`: Access token for authentication.
  - `base_url`: Optional base URL for the API (defaults to Power BI API URL).
- **Output**: Returns the HTTP status code from the API response.
- **Logic**:
  - If `base_url` is not provided, it uses the default Power BI API URL.
  - Makes a POST request to the API endpoint using the provided group and dataset ID.
  - Returns the API response status.

#### 2. `wait_for_refresh(group_id, dataset_id, access_token, polling_interval=40)`
- **Purpose**: Waits for the Power BI dataset to complete its refresh.
- **Inputs**:
  - `group_id`: Group ID (Workspace).
  - `dataset_id`: Dataset ID.
  - `access_token`: API token for authentication.
  - `polling_interval`: Time interval in seconds between refresh status checks (default is 40 seconds).
- **Output**: None.
- **Logic**:
  - Waits for 30 seconds using `time.sleep()`.
  - Can be extended to include status checks and log refresh time.

#### 3. `log_refresh_to_snowflake(start_time, end_time, status, error_message, ERROR_IND)`
- **Purpose**: Logs the refresh status to the Snowflake database.
- **Inputs**:
  - `start_time`: Refresh start time.
  - `end_time`: Refresh end time.
  - `status`: Final status of the refresh (e.g., Success, Failed).
  - `error_message`: Error message if the refresh failed.
  - `ERROR_IND`: Indicator flag for errors.
- **Output**: None.
- **Logic**:
  - Logs the information into a designated Snowflake table for auditing and tracking.

#### 4. `trigger_dbt_job(ACCOUNT_ID, JOB_ID, API_KEY)`
- **Purpose**: Triggers a dbt job using the dbt Cloud API.
- **Inputs**:
  - `ACCOUNT_ID`: dbt Cloud account ID.
  - `JOB_ID`: dbt job ID to run.
  - `API_KEY`: API key for authentication.
- **Output**: Returns the job run ID if successful.
- **Logic**:
  - Makes a POST request to the dbt Cloud API to trigger a job.
  - Returns the job run ID from the API response if successful.

#### 5. `get_job_run_status(ACCOUNT_ID, job_run_id, API_KEY)`
- **Purpose**: Checks the status of a dbt job using its run ID.
- **Inputs**:
  - `ACCOUNT_ID`: dbt Cloud account ID.
  - `job_run_id`: ID of the job run.
  - `API_KEY`: API key for authentication.
- **Output**: Returns the job run status.
- **Logic**:
  - Makes a GET request to fetch the job run status from dbt Cloud API.
  - Returns the status from the API response.

#### 6. `get_all_report_ids()`
- **Purpose**: Fetches all distinct report IDs from the Snowflake configuration table.
- **Inputs**: None.
- **Output**: List of report IDs.
- **Logic**:
  - Connects to Snowflake using `get_snowflake_connection()`.
  - Executes a SQL query to fetch distinct `REPORT_ID` values.
  - Closes the connection and returns the result.

#### 7. `get_config_values(report_id)`
- **Purpose**: Retrieves configuration values for a specific report.
- **Inputs**:
  - `report_id`: Report ID for which config values are required.
- **Output**: Dictionary of configuration key-value pairs.
- **Logic**:
  - Connects to Snowflake.
  - Executes a query to fetch all config values from the config table.
  - Returns the results as a dictionary.

#### 8. `get_config_value_for_key(report_id, config_key)`
- **Purpose**: Fetches a specific configuration value using a report ID and config key.
- **Inputs**:
  - `report_id`: Report ID.
  - `config_key`: Configuration key to fetch.
- **Output**: Configuration value if it exists, otherwise `None`.
- **Logic**:
  - Connects to Snowflake.
  - Executes a SQL query to retrieve the specific configuration value.
  - Returns the result.

#### 9. `is_within_schedule(report_id)`
- **Purpose**: Checks if the current time is within the scheduled time window for a report.
- **Inputs**:
  - `report_id`: Report ID to check the schedule.
- **Output**: Returns `True` if the current time is within the scheduled window, otherwise `False`.
- **Logic**:
  - Fetches the scheduled time from the configuration table.
  - Converts the time to CST and checks with a buffer of Â±10 minutes.

#### 10. `get_snowflake_connection()`
- **Purpose**: Establishes and returns a connection to Snowflake using private key authentication.
- **Inputs**: None.
- **Output**: Snowflake connection object.
- **Logic**:
  - Reads environment variables for credentials (ZID, private key, passcode).
  - Uses the `snowflake.connector` to establish a connection.
  - Returns the connection object.

---

-----------------------------------------------------------------------------------------


// DBT Job and PBI Refresh Workflow (Editable)
digraph {
	S [label=Start]
	A [label="Get All Report IDs (Not Ran or Failed)"]
	B [label="Fetch Configuration using get_config_values()"]
	C [label="Check Configuration"]
	D [label="Check Scheduled Time using is_within_schedule()"]
	E1 [label="Trigger DBT Job using trigger_dbt_job()"]
	E2 [label="Log Error and End Process"]
	F [label="Check Job Status using get_job_run_status()"]
	G [label="Evaluate Status: DbJobRunStatus.SUCCESS"]
	H1 [label="Check Max Attempts using max_attempts"]
	H2 [label="Log Error: Max Attempts Reached"]
	I [label="Refresh PBI using refresh_pbi()"]
	J [label="Wait for Refresh using wait_for_refresh()"]
	K1 [label="PBI Refresh Successful"]
	K2 [label="Retry PBI Refresh if Attempt < Max Attempts"]
	L [label="Log Refresh to Snowflake using log_refresh_to_snowflake()"]
	E [label="End Process"]
	S -> A
	A -> B
	B -> C
	C -> D [label="Config Found"]
	C -> E2 [label="Config Not Found"]
	D -> E1 [label="Within Schedule"]
	D -> E2 [label="Outside Schedule"]
	E1 -> F
	F -> G
	G -> H1 [label=Success]
	G -> E2 [label=Failed]
	H1 -> I [label="Attempts Remaining"]
	H1 -> H2 [label="Max Attempts Reached"]
	I -> J
	J -> K1 [label=Success]
	J -> K2 [label=Failure]
	K2 -> H1 [label=Retry]
	H2 -> L
	L -> E
	K1 -> E
}
